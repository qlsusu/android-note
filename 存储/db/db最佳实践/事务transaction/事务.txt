为什么使用事务：
1. 原子性
	事务中包含了对数据库的多个修改，这些修改要么都成功，要么都不成功
2. 性能提升
	当提交事务时，会发生io操作（如：将修改写入到WAL文件）
		该操作是比较耗时的，如：sqlite虽然1秒可以插入50000条数据，但是1s内只能支持 十几次 事务
	开启事务 + 100次插入 + 提交事务，该操作组合 执行1遍 vs
		开启事务 + 一次插入 + 提交事务，该操作组合 执行100遍
	性能会提升很多

默认下，一个statement在执行时，会自动添加一个事务

两种事务模式：
. SQLiteSession#TRANSACTION_MODE_IMMEDIATE
	SQLiteSession访问数据库时，申请RESERVED锁：
		参见：锁.txt
	并发性：当一个SQLiteSession（对应一个线程）在 写 数据库时，允许其他SQLiteSession 读 数据库
. SQLiteSession#TRANSACTION_MODE_EXCLUSIVE
	SQLiteSession访问数据库时，申请EXCLUSIVE锁：
	并发性：当一个SQLiteSession（对应一个线程）在 读写 数据库时，不允许其他SQLiteSession 读写 数据库

事务的正确使用方式：
将一组修改的statement放入到一个事务中，
示例：
	SQLiteDatabase#beginTransactionNonExclusive 或者 SQLiteDatabase#beginTransaction
	try{
		//执行 增删改
		...
		SQLiteDatabase#setTransactionSuccessful
	}finally{
		SQLiteDatabase#endTransaction
	}
