设：contentprovider内部 对数据的处理方式 采用sqlitedatabase

当要求contentprovider进行修改时，推荐 客户方使用 applybatch(arraylist<contentprovideroperation>)这种方式

为什么使用：
. 在服务方的contentprovider.applybatch中，开启/提交事务
	而在contentprovider的单个增删改方法中，均不再开启/提交事务
	则，只执行一次事务，提高性能
. 减少client与provider的通信次数（本质上binder通信）

------------------------------在服务方contentprovider中
@Override
public ContentProviderResult[] applyBatch(ArrayList<ContentProviderOperation>operations) throws OperationApplicationException{
	SQLiteDatabase db = mOpenHelper.getWritableDatabase();
	//开始事务	
	db.beginTransaction();
	try{
		//使用super的applybatch的方式
		ContentProviderResult[] results = super.applyBatch(operations);

		//设置事务标记为successful
		db.setTransactionSuccessful();
		return results;
	}finally {
		//结束事务
		db.endTransaction();
	}
}

//原生的ContentProvider.java中
public @NonNull ContentProviderResult[] applyBatch(
        @NonNull ArrayList<ContentProviderOperation> operations)
                throws OperationApplicationException {
    final int numOperations = operations.size();
    final ContentProviderResult[] results = new ContentProviderResult[numOperations];
    //这里没有对contentoperation进行归类整理，而是直接调用contentoperation.apply来执行单个operation
    for (int i = 0; i < numOperations; i++) {
    	//分解成为单个增删改方法
        results[i] = operations.get(i).apply(this, results, i);
    }
    return results;
}

------------------------------客户方中
ContentResolver#applyBatch(String authority, ArrayList<ContentProviderOperation> operations)

>>>ContentProviderOperation的构建:
ContentProviderOperation.Builder builder=ContentProviderOperation.newXXX(Uri);
	如：newInsert
builder.withxxx，如：
	builder.withSelection("column1=?",new String[]{"xxx"});
	builder.withValues(ContentValues);
ContentProviderOperation operation=builder.build();
