----------------------------chain
Chain封装了一个流程：RealInterceptorChain#proceed(Request, StreamAllocation, HttpCodec, RealConnection)：
. 找到要执行的interceptor：interceptors[chain.index]
. 构建newChain
	newChain.interceptors = interceptors
	newChain.index = index+1
	相同的streamAllocation, connection, httpCodec 等
. 执行intercept：Interceptor#intercept(newChain)
	为什么传递newChain：
	当Interceptor执行完pre后，调用newChain.proceed来 nextInterceptor.intercept

则拦截器的执行过程 可被描述为：
	interceptor1-pre interceptor2-pre interceptor3-pre ----
	---- interceptor3-post interceptor2-post interceptor1-post
	即是：interceptor虽然 没被 设计为 next结构，但是 interceptor链仍可 顺序pres 逆序 posts

----------------------------interceptor
intercept流程：Interceptor#intercept(newChain)
. 执行 pre逻辑
. newChain.proceed
. 执行 post逻辑

intercept举例：
class LoggingInterceptor implements Interceptor {
  	@Override 
  	public Response intercept(Interceptor.Chain chain) throws IOException {
	    Request request = chain.request();

	    //执行自身的逻辑：日志打印
	    long t1 = System.nanoTime();
	    logger.info(String.format("Sending request %s on %s%n%s",
	        request.url(), chain.connection(), request.headers()));

	    //需要在Interceptor中手动来调用chain.proceed要求chain上的下一个interceptor来进行拦截
	    Response response = chain.proceed(request);

		//执行自身的逻辑：日志打印
	    long t2 = System.nanoTime();
	    logger.info(String.format("Received response for %s in %.1fms%n%s",
	        response.request().url(), (t2 - t1) / 1e6d, response.headers()));

	    return response;
	}
}

如何添加一个interceptor：
OkHttpClient.Builder#addInterceptor
