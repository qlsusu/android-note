请求由RealCall代表
如何实例化：Call OkHttpClient.newCall(Request request)

Dispatcher
负责任务的调度，如：同步/异步 任务的触发执行，任务的完成后 来尝试启动其他任务

同步请求：
RealCall#execute
	Dispatcher#executed
		放入到runningSyncCalls中
	RealCall#getResponseWithInterceptorChain
    Dispatcher#finished(RealCall)

异步请求：
RealCall#enqueue
	Dispatcher#enqueue
		条件判断：针对于：正在运行的异步call的个数 和 针对于host的call的总数
            runningAsyncCalls.size() < Dispatcher#maxRequests（默认：64） && 
			runningCallsForHost(call) < Dispatcher#maxRequestsPerHost（默认：5）
		通过条件 则在线程池上（类似：Executors#newCachedThreadPool()）执行任务：
			放入到runningAsyncCalls中
    		java.util.concurrent.Executor#execute
				RealCall.AsyncCall#execute（AsyncCall是一个NamedRunnable，其run()会调用execute）
					RealCall#getResponseWithInterceptorChain
					Dispatcher#finished(RealCall.AsyncCall)
						从readyAsyncCalls中取出任务，判断是否满足条件，最终执行该任务
        未通过条件，
        	放入到readyAsyncCalls中
            该任务 在Dispatcher#finished(RealCall.AsyncCall)时，可能被执行

请求核心：
Response getResponseWithInterceptorChain() throws IOException {
    // Build a full stack of interceptors.
    List<Interceptor> interceptors = new ArrayList<>();
    //添加自定义的interceptor
    interceptors.addAll(client.interceptors());

    //其中，构建了StreamAllocation
    //当连接route失败时（或其他原因），或，需要重定向时，调整StreamAllocation，再次发送请求
        （方式：再次RealInterceptorChain#proceed(okhttp3.Request, StreamAllocation, HttpCodec, RealConnection)）
    interceptors.add(retryAndFollowUpInterceptor);

    //请求处理，如：添加Connection:Keep-Alive, Content-Encoding:gzip等
    //响应处理，如：响应的Content-Encoding如果是gzip，则解压该response.body，并移除Content-Encoding, Content-Length
    interceptors.add(new BridgeInterceptor(client.cookieJar()));

    //请求处理：有可能直接读取缓存，而不进行真实的联网
	//响应处理：如果响应能够缓存，则对其进行缓存
    interceptors.add(new CacheInterceptor(client.internalCache()));

	//建立 客户端-服务器 连接的 Socket/SSLSocket连接
    //通过StreamAllocation#newStream的方式，为该StreamAllocation找到RealConnection（来自连接池，或者，新建一个），得到HttpCodec
    interceptors.add(new ConnectInterceptor(client));
    
	//添加自定义的net interceptor
    if (!forWebSocket) {
        interceptors.addAll(client.networkInterceptors());
    }
    
    //执行真实的input/output通信：向服务器发送请求，读取来自服务器的响应
    interceptors.add(new CallServerInterceptor(forWebSocket));

    Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,
        originalRequest, this, eventListener, client.connectTimeoutMillis(),
        client.readTimeoutMillis(), client.writeTimeoutMillis());

	//原型为：RealInterceptorChain#proceed(Request, StreamAllocation, HttpCodec, RealConnection)
	//StreamAllocation对应于当前的Request，被分配到了什么RealConnection上，将使用什么HttpCodec来与服务器交互
	//在ConnectInterceptor.intercept中，上述变量将被构建
	//Chain的执行流程，参见：拦截器-chain interceptor.txt
    return chain.proceed(originalRequest);
}

启动其他AsyncCall：
启动时机：
. 本AsyncCall完成后
    Dispatcher#finished(RealCall) 或 Dispatcher#finished(RealCall.AsyncCall)
        Dispatcher#finished(Deque<T> calls, T call, boolean promoteCalls)
            将Call从相应的队列 runningSyncCalls 或 runningAsyncCalls中移出
            Dispatcher#promoteCalls
                试图执行 readyAsyncCalls中的Call
. 更新了maxRequests 或 maxRequestsPerHost时
    因为该数值可能会变大，则有可能可以再执行其他AsyncCall
