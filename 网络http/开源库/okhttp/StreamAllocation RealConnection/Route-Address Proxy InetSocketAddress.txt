-------------------------Route
当没有从ConnectionPool找到RealConnection时，或者需要新建一个RealConnection时，均需要目标地址（host和ip等）
Route核心数据：
	根据Address，
	选择了Proxy，
	得到了InetSocketAddress（ip和port）
		如果是 Proxy.Type是DIRECT/SOCKS，那么ip和port对应 Address.url（HttpUrl类型）中的
		如果是 Proxy.Type是HTTP，那么ip和port对应 Proxy.sa（SocketAddress类型）中的

使用RouteSelector来得到 Address对应的 Route（需要参考于 Proxy）：
	本质上，通过RouteSelector得到的是一个Selection
		其包含了一个List的Route 对应于一个Proxy
			为什么是一个list：通过dns查询，string host对应了一个list的int address
				参见：Dns#List<InetAddress> lookup(String hostname)
				Address.dns来自OkHttpClient#dns
				默认为：Dns#SYSTEM
	什么时候被构建：构建StreamAllocation时，其作为 成员变量
		其需要预先被提供Proxy，而Proxy由Address提供（Proxy（一个proxy（其中也包含了无代理的形式：Proxy.NO_PROXY）），或，ProxySelector（一些proxy））
			获取方式：RouteSelector#resetNextProxy
	工作原理：RouteSelector#next（返回的是一个Selection（一组Route），而不是单个Route）：
		RouteSelector#nextProxy
			得到下一个Proxy
			RouteSelector#resetNextInetSocketAddress
				重置 RouteSelector.inetSocketAddresses，规则为：
				若Proxy.Type为DIRECT时，为：HttpUrl的 host对应的ip（通过dns获得）和端口
				若Proxy.Type为HTTP时（http代理），为：Proxy的 ip（通过dns获得）和端口
				若Proxy.Type为SOCKS时（socket代理），为：HttpUrl的 host（并没有通过dns来获得host对应的ip）和端口
					只是在创建Socket时，采用了Socket(Proxy)的形式，参见：RealConnection#connectSocket
		根据 Proxy对应的 RouteSelector.inetSocketAddresses，来构建List<Route>，并构建Selection

-------------------------Address
HttpUrl
要请求的地址，包含了：schema host port path query
	port的取值范围为：1 ~ 0xFFFF
在哪里被构建：Address的构造函数中，通过Builder来构建Request时，指定了url

Address：
在哪里被构建：
	RetryAndFollowUpInterceptor#intercept
		构建StreamAllocation时，进行了构建：RetryAndFollowUpInterceptor#createAddress
核心数据：
	请求地址
		HttpUrl（注意：其中只包含了schema host port信息）
		参见：Address的构造函数
	代理
		Proxy, ProxySelector
		具有OkHttpClient提供，参见：Address构造函数
	https相关
		SSLSocketFactory
		HostnameVerifier
		CertificatePinner
	协议相关
		ConnectionSpec

-------------------------InetSocketAddress
InetSocketAddress核心数据：
	ip
		InetAddress类型（包含了 int类型的address 和 hostName) 
			通过DNS来查询到 string类型的host 对应的ip：InetAddress#getByName(String)
	port
		范围：(0 - 0xFFFF)
		2个byte
