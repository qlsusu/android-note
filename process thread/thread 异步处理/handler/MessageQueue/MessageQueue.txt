消息链表：
该链表存储着还没有处理的Message
以消息头（MessageQueue#mMessages（Message类型））来表示一个链表
单链表结构：Message只有next
链表头：普通的Message（无论是否异步），或，sync barrier

------------------------------------------------入链表 出链表
入链表MessageQueue#enqueueMessage(Message msg, long when)
规则：按照Message#when的 ↑序 进行排序（越早的消息 越排在 链表前部）（如果两个消息的when相同，那么后来的Message 被放入到 后面）
	一般Message 和 异步Message 和 sync barrier消息 在入链表时，都采用上述策略，没什么不同
		什么是 异步消息 和 sync barrier消息，参见：sync barrier 异步消息/
当入链表 而改变了表头时，或者，插入了一个异步消息（表头为sync barrier，且，该异步消息之前，未有其他的异步消息）时
	代表着：有可能需要调整 取消息（调用MessageQueue#next）线程的阻塞时长（阻塞时长：取消息线程要被阻塞多久，而等其被唤醒时，其有可能会取到一条消息）		
	如果其之前在取消息时被阻塞了（由MessageQueue#mBlocked表示），则唤醒它（之后其会走MessageQueue#next中的for循环，返回消息，或者，确定新的阻塞时间）

出链表MessageQueue#next：
	返回的消息 满足了：
		. when<now
		. 异步性（如果表头为sync barrier，则其必须要求为异步消息；否则，不做要求）
	调整mBlocked：在执行next时，线程是否被阻塞了
		如果返回了消息，那么没有被阻塞
		否则，被阻塞了
		有什么用：在入链表时，根据mBlocked来有选择的唤醒 被阻塞线程
	--
	流程：
	quit检查：如果还没有 退出，那么继续后续流程
		如果退出，返回null，则Looper#loop最终会返回，则loop方法之后的流程开始执行（一般情况下，无任何操作，则所在线程 因执行完毕而终止）
	for循环如下：
	阻塞 一段时间（本质：要等多久，我才能获取到一条消息）
		注意：
		第一次为0，后续为 下次应该被阻塞多久
		阻塞：MessageQueue#nativePollOnce(long ptr, int timeoutMillis) 来阻塞当前线程
			ptr：被阻塞的线程（调用了Looper#prepare()的所在线程，其中会调用MessageQueue的构造函数
				而在MessageQueue的构造函数中：mPtr = nativeInit()）
			timeoutMillis：
				如果取值为-1，则代表无限等待下去			
				如果为0，则不阻塞
		唤醒：MessageQueue#nativeWake(long ptr)
			在MessageQueue#enqueueMessage(Message msg, long when)中
	找到要返回的消息
		找到候选消息（初始为 链表头）
			如果链表头不为sync barrier，则为：表头
			如果链表头为sync barrier，那么往后找到一个 异步消息
		判断候选消息 是否为null
			如果不为null
				判断其是否到when（now>=when）
				如果到了，返回该消息（并将该消息从链表中移除） -> 流程结束
				如果没到，计算 下次应该被阻塞多久
			如果为null
				下次被阻塞时间=-1（永久阻塞，直到被加入了一条消息，则有可能被唤醒）
				注意：
				对于HandlerThread等第三方线程来关联Looper的，我们应该在合适的时间将该线程释放掉（如：调用MessageQueue#quit）
				来避免：根据业务，已经没有必要再发送消息了，但是，HandlerThread还未正常结束，而是一直被阻塞
	quit检查：
		注意：如果能进行到这一步，说明，当前还没有 消息返回
		如果已经退出，那么返回null，而Looper#loop也会返回，则其所在线程会继续执行下去（而往往：Looper#loop之后不会再执行什么了，那么，该线程正常结束）		
	执行IdleHandle
		注意：如果能执行到这一步，说明，当前还没有 消息返回
		存在IdleHandle，执行：MessageQueue.IdleHandler#queueIdle
			之后，设置 下次应该被阻塞多久=0
				为什么为0：
				执行IdleHandler也是需要时间的，则应更新下 下次应该被阻塞多久
					为啥要更新：如：之前让我等10s，而IdleHandle执行了3s，那么，我应该只用等 10-3=7s
					在下次for循环中来计算出 该时间，则本次计算的 该时间 无效了，则置为0
				又因为，在执行IdleHandler时，并未采用了synchronized，则有可能改变了 链表结构，则 有可能就能获取到消息，或，阻塞时间变了
		如果不存在，continue，来执行下一次for循环（意味着：本次的阻塞时长 是有效的，执行了真实的阻塞）
	再次for循环
		有可能 在这次中 按照真实的阻塞时长 来执行阻塞

如何保证同步：
synchronized
	